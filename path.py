from fastapi import APIRouter, Form, HTTPException
from fastapi.responses import JSONResponse
import os
import utils
import json

router = APIRouter()

@router.post("/generate-paths", summary="生成Java方法路径图片和路径数据", response_description="返回图片URL和路径数据列表")
async def generate_paths(sessionId: str = Form(...), method: str = Form(...)):
    if not sessionId or not method:
        raise HTTPException(status_code=400, detail="sessionId and method are required.")
    project_dir = os.path.join("uploads", sessionId)
    output_dir = os.path.join("results", sessionId)
    os.makedirs(output_dir, exist_ok=True)
    # 1. 提取源码并以GBK编码保存
    try:
        source = utils.find_java_method_source(project_dir, method)
        if not source:
            return JSONResponse(status_code=404, content={"error": "Method source not found"})
        code_file = os.path.abspath(os.path.join(output_dir, "PathAnalysis.java"))
        with open(code_file, "w", encoding="gbk") as f:
            f.write("public class PathAnalysis {\n")
            f.write(source)
            f.write("\n}")
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Source extract error: {str(e)}"})
    import subprocess
    # 2. 调用comex生成图片
    try:
        img_path = os.path.join(output_dir, "output.png")
        cmd_img = [
            'comex',
            '--lang', 'java',
            '--code-file', code_file,
            '--graphs', 'cfg',
            '--output', 'png'
        ]
        subprocess.run(cmd_img, check=True, timeout=60)
        images = [img_path] if os.path.exists(img_path) else []
        if not images:
            return JSONResponse(status_code=500, content={"error": "No images generated by comex"})
    except subprocess.CalledProcessError as e:
        return JSONResponse(status_code=500, content={"error": f"comex failed (png): {str(e)}"})
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"comex error (png): {str(e)}"})
    # 3. 调用comex生成json路径数据
    try:
        json_path = os.path.join(output_dir, "output.json")
        cmd_json = [
            'comex',
            '--lang', 'java',
            '--code-file', code_file,
            '--graphs', 'cfg',
            '--output', 'json'
        ]
        subprocess.run(cmd_json, check=True, timeout=60)
        json_files = [json_path] if os.path.exists(json_path) else []
        if not json_files:
            return JSONResponse(status_code=500, content={"error": "No json generated by comex"})
        # 只取第一个json文件
        with open(json_files[0], 'r', encoding='utf-8') as jf:
            json_data = json.load(jf)
        # 枚举所有路径：从 start_node 到出口节点，节点 label 按顺序拼接
        nodes = {node['id']: node for node in json_data['nodes']}
        edges = {}
        for link in json_data['links']:
            edges.setdefault(link['source'], []).append(link['target'])
        start_nodes = [n['id'] for n in json_data['nodes'] if n['type_label'] == 'start']
        end_nodes = set(nodes) - set(link['source'] for link in json_data['links'])
        result = set()
        def dfs(path, current):
            if current in end_nodes:
                labels = [nodes[n]['label'] for n in path]
                result.add(' -> '.join(labels))
                return
            for next_node in edges.get(current, []):
                if next_node not in path:  # 防止死循环
                    dfs(path + [next_node], next_node)
        for start in start_nodes:
            dfs([start], start)
        paths = list(result)
    except subprocess.CalledProcessError as e:
        return JSONResponse(status_code=500, content={"error": f"comex failed (json): {str(e)}"})
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"comex error (json): {str(e)}"})
    rel_images = [os.path.relpath(img, '.') for img in images]
    return {"images": rel_images, "paths": paths} 